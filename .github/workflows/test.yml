# This workflow runs in a dockerless situation for now!
# Adding flows for docker environment would be really appreciated.

name: Test

on:
  push:
    branches: [ master ]
  pull_request:

env:
  MYSQL_HOST: 127.0.0.1
  BUNDLE_PATH: vendor/bundle
  UPLOAD_COVERAGE: true

jobs:
  testing:

    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:5.7.30
        options: --health-cmd "mysqladmin ping -h localhost" --health-interval 20s --health-timeout 10s --health-retries 10
        ports:
          - 3306:3306
        env:
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2.1.1
      with:
        path: vendor/bundle
        key: bundle-${{ hashFiles('**/Gemfile.lock') }}
    - uses: actions/cache@v2.1.1
      with:
        path: node_modules
        key: yarn-${{ hashFiles('**/yarn.lock') }} 
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7.2
    - name: Install dependencies
      run: |
        curl -sL https://deb.nodesource.com/setup_10.x | bash - && sudo apt install -y nodejs
        sudo apt install -y yarn
        yarn install --check-files
        bundle install --path vendor/bundle
    - name: Set Database
      env:
        RAILS_ENV: development
      run: bundle exec rails db:setup
    - name: Run tests
      run: bundle exec rails t
